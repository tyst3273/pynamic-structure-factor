
the input options suppose that calculations are done with LAMMPS using an orthorhombic simulation box. 
the consequences of these assumptions are as follows: 

    (1) 'atom_types' below is a list of strings that are mapped to the 'atom types' in 
        the LAMMPS simulation. the atoms in 'atom_types' should be given in the same order 
        as used in the simulation. 

    (2) the orthorhombic simulation box is assumed since all that is written using the hdf5 
        dump method of lammps is the box lengths. so to calculate the box size dynamically, 
        we have to use these data which imposes an orhtorhombic simulation box. dervied from 
        this requirement is that the 'lattice_vectors' must also be orthorhombic. in most cases, 
        this isnt an overly restrictive requirement since you can just pick a conventional cell 
        that is orhto. make sure to convert the real Q-vectors you want to study to the new basis!
        NOTE: this restriction can be (fairly) easily reversed later on.


note about unwrapping:

        the issue is that, if the positions are written out 'wrapped' (e.g. lammps
        x y z instead of xu yu zu), then atoms that cross the box boundary are wrapped
        back to the other side of the box. in that case, atoms near the box boundary will
        occasionally jump discontinously by a full-box length. i did some checking and this
        screws up the debye waller factor at low Q (i.e. wave-length ~ the box). it was
        only a minor effect, but this takes care of it and isn't super expensive.

        the solution is to 'un-impose' the minimum image convention. i.e. treat every
        atom as the center of the cell at t=0 and at all other times t', if the atom has
        deviated by half a box length (i.e. outside the cell since the atom is at the
        center), shift it back. See e.g. Allen: "Computer Simulation of Liquids".

        NOTE: this methods assumes lattice vectors and coordinates in traj file are in Angstrom!
        it also assumes that the simulationcell and underlying unitcell are orthorhombic. this
        last restriction isnt super important and can be fixed by using the simulation box vectors
        to go to reduced coordinates in the simulation cell. then unwrapping is as easy as shifting
        along each cartesian axis by +- 1.

        the crystal lattice vectors don't really need to be orthorhombic at all... they are used
        to get Q in cartesian coords, at which point scattering for any simulation cell can be
        calculated by summing over positions. the reason it is enforced is so that lx,ly,lz can
        be calculated like below ...


new features ...

    can pretty easily calculate van-hove function. if we calculate S(Q,w) on uniform grid spanning
    large enough part of reciprocal space (large enough that intensity falls off ~> 0 for large Q)
    then we can inverse space FT to get G(r,t) (i.e. the green function). 
    HAS to be done on mesh tho


